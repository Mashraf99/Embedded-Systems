
control intencity using ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000004d2  00000546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000033e4  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b6c  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000044df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a59  00000000  00000000  00004587  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ad  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000950  00000000  00000000  0000538d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00005ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000218  00000000  00000000  00005eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c2  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00006892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4d d0       	rcall	.+154    	; 0x15e <main>
  c4:	04 c2       	rjmp	.+1032   	; 0x4ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment_Init>:
		}
}

void Segment_Init(void){
	/* Setup DigitPos */
	POS_PORT_DDR = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	POS_PORT	 = 0xff;
  cc:	8b bb       	out	0x1b, r24	; 27
	/* Setup DigitData */
	DATA_PORT_DDR = 0xff;
  ce:	84 bb       	out	0x14, r24	; 20
	DATA_PORT	  = 0x00;
  d0:	15 ba       	out	0x15, r1	; 21
	/* Enable Segments */
	SET_SEG1_DDR;
  d2:	e1 e6       	ldi	r30, 0x61	; 97
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 83       	st	Z, r24
	ENABLE_SEG1;
  dc:	e2 e6       	ldi	r30, 0x62	; 98
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <Segment_DisplayDigit>:
	//SET_SEG2_DDR;
	//ENABLE_SEG2;
}
void Segment_DisplayDigit(unsigned char digitPos,unsigned char digitValue){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	2b 97       	sbiw	r28, 0x0b	; 11
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
	unsigned char numbers[]= {ZERO, ONE, TWO, THREE, FOUR, FIVE
  fc:	9b e0       	ldi	r25, 0x0B	; 11
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	de 01       	movw	r26, r28
 104:	11 96       	adiw	r26, 0x01	; 1
 106:	01 90       	ld	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	9a 95       	dec	r25
 10c:	e1 f7       	brne	.-8      	; 0x106 <Segment_DisplayDigit+0x1e>
	,SIX, SEVEN, EIGHT, NINE,DOT};
	
	POS_PORT = ~(1<<(digitPos-1));
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	a9 01       	movw	r20, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <Segment_DisplayDigit+0x36>
 11a:	44 0f       	add	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <Segment_DisplayDigit+0x32>
 122:	ca 01       	movw	r24, r20
 124:	80 95       	com	r24
 126:	8b bb       	out	0x1b, r24	; 27
	
	if(digitValue == '.')
 128:	6e 32       	cpi	r22, 0x2E	; 46
 12a:	19 f4       	brne	.+6      	; 0x132 <Segment_DisplayDigit+0x4a>
	DATA_PORT = numbers[10];
 12c:	8b 85       	ldd	r24, Y+11	; 0x0b
 12e:	85 bb       	out	0x15, r24	; 21
 130:	05 c0       	rjmp	.+10     	; 0x13c <Segment_DisplayDigit+0x54>
	else
	DATA_PORT = numbers[digitValue];
 132:	fe 01       	movw	r30, r28
 134:	e6 0f       	add	r30, r22
 136:	f1 1d       	adc	r31, r1
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <Segment_DisplayDigit+0x58>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Segment_DisplayDigit+0x5e>
 146:	00 00       	nop
	
	_delay_ms(1);
	
	POS_PORT = 0xff;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	8b bb       	out	0x1b, r24	; 27
}
 14c:	2b 96       	adiw	r28, 0x0b	; 11
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <main>:
#include "lcd.h"
volatile int count=0; //volatile because this variable is transfered between multiple functions.

int main(void)
{
	sei();	//SREG |= (1<<8);
 15e:	78 94       	sei
	//enable the global interrupt.
	
	//ADMUX |= (1<<REFS0); // Internal 2.56V Voltage Reference with external capacitor at AREF pin 
	ADMUX |= (1<<REFS1); // AVCC with external capacitor at AREF pin
 160:	3f 9a       	sbi	0x07, 7	; 7
	ADMUX |= (1<<ADLAR); // 1 :- MSB at ADCH
 162:	3d 9a       	sbi	0x07, 5	; 7
						 // default selecting AD0
						 
	ADCSRA |= (1<<ADEN); // Enable ADC
 164:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC); // Start convention (Just one time and then it goes low)
 166:	36 9a       	sbi	0x06, 6	; 6
	ADCSRA |= (1<<ADFR); // continue conventionalizing (set ADSC to be high again )
 168:	35 9a       	sbi	0x06, 5	; 6
	
		
	DDRB |= (1<<PB4);  //make LED D10 as an output.
 16a:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1<<PB4); //make LED D10 on.
 16c:	c4 9a       	sbi	0x18, 4	; 24

	TCCR0 |= (1<<CS01);  //Timer/Counter Control Register first 3 bits are re-scaler 010 -> /8
 16e:	83 b7       	in	r24, 0x33	; 51
 170:	82 60       	ori	r24, 0x02	; 2
 172:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01); //PWM
 174:	83 b7       	in	r24, 0x33	; 51
 176:	88 60       	ori	r24, 0x08	; 8
 178:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<WGM00); // enable fast PWM //pin3 (Fast PWM)
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01); //clear on compare match State.
 180:	83 b7       	in	r24, 0x33	; 51
 182:	80 62       	ori	r24, 0x20	; 32
 184:	83 bf       	out	0x33, r24	; 51
	
	PORTE |= (1<<PE4);
 186:	1c 9a       	sbi	0x03, 4	; 3
	
	//OCR0 = ADCH;			 //Output Compare Match.PB4
	 Segment_Init();
 188:	9f df       	rcall	.-194    	; 0xc8 <Segment_Init>
	LCD_Init();
 18a:	53 d1       	rcall	.+678    	; 0x432 <LCD_Init>
	char a;
	char b;
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
 18c:	4b e0       	ldi	r20, 0x0B	; 11
 18e:	51 e0       	ldi	r21, 0x01	; 1
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	93 d1       	rcall	.+806    	; 0x4bc <LCD_DispStringXY>
	
	while(1)
	{
		for(int i=0;i<256;i++){
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
		OCR0 = i;
		Segment_DisplayDigit(3,OCR0%10);
 19a:	0f 2e       	mov	r0, r31
 19c:	fd ec       	ldi	r31, 0xCD	; 205
 19e:	df 2e       	mov	r13, r31
 1a0:	f0 2d       	mov	r31, r0
		Segment_DisplayDigit(2,(OCR0/10)%10);
		Segment_DisplayDigit(1,OCR0/100);
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f9 e2       	ldi	r31, 0x29	; 41
 1a6:	bf 2e       	mov	r11, r31
 1a8:	f0 2d       	mov	r31, r0
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
	
	while(1)
	{
		for(int i=0;i<256;i++){
 1aa:	00 e0       	ldi	r16, 0x00	; 0
 1ac:	11 e0       	ldi	r17, 0x01	; 1
 1ae:	e1 2c       	mov	r14, r1
 1b0:	f1 2c       	mov	r15, r1
 1b2:	68 c0       	rjmp	.+208    	; 0x284 <main+0x126>
		OCR0 = i;
 1b4:	c1 bf       	out	0x31, r28	; 49
		Segment_DisplayDigit(3,OCR0%10);
 1b6:	61 b7       	in	r22, 0x31	; 49
 1b8:	6d 9d       	mul	r22, r13
 1ba:	81 2d       	mov	r24, r1
 1bc:	11 24       	eor	r1, r1
 1be:	86 95       	lsr	r24
 1c0:	86 95       	lsr	r24
 1c2:	86 95       	lsr	r24
 1c4:	88 0f       	add	r24, r24
 1c6:	98 2f       	mov	r25, r24
 1c8:	99 0f       	add	r25, r25
 1ca:	99 0f       	add	r25, r25
 1cc:	89 0f       	add	r24, r25
 1ce:	68 1b       	sub	r22, r24
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	8a df       	rcall	.-236    	; 0xe8 <Segment_DisplayDigit>
		Segment_DisplayDigit(2,(OCR0/10)%10);
 1d4:	61 b7       	in	r22, 0x31	; 49
 1d6:	6d 9d       	mul	r22, r13
 1d8:	61 2d       	mov	r22, r1
 1da:	11 24       	eor	r1, r1
 1dc:	66 95       	lsr	r22
 1de:	66 95       	lsr	r22
 1e0:	66 95       	lsr	r22
 1e2:	6d 9d       	mul	r22, r13
 1e4:	81 2d       	mov	r24, r1
 1e6:	11 24       	eor	r1, r1
 1e8:	86 95       	lsr	r24
 1ea:	86 95       	lsr	r24
 1ec:	86 95       	lsr	r24
 1ee:	88 0f       	add	r24, r24
 1f0:	98 2f       	mov	r25, r24
 1f2:	99 0f       	add	r25, r25
 1f4:	99 0f       	add	r25, r25
 1f6:	89 0f       	add	r24, r25
 1f8:	68 1b       	sub	r22, r24
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	75 df       	rcall	.-278    	; 0xe8 <Segment_DisplayDigit>
		Segment_DisplayDigit(1,OCR0/100);
 1fe:	61 b7       	in	r22, 0x31	; 49
 200:	6b 9d       	mul	r22, r11
 202:	61 2d       	mov	r22, r1
 204:	11 24       	eor	r1, r1
 206:	62 95       	swap	r22
 208:	6f 70       	andi	r22, 0x0F	; 15
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	6d df       	rcall	.-294    	; 0xe8 <Segment_DisplayDigit>
		a=(OCR0/100)+0x30;
 20e:	41 b7       	in	r20, 0x31	; 49
		b=((OCR0/10)%10)+0x30;
 210:	a1 b6       	in	r10, 0x31	; 49
		c=(OCR0%10)+0x30;
 212:	c1 b6       	in	r12, 0x31	; 49
		for(int i=0;i<256;i++){
		OCR0 = i;
		Segment_DisplayDigit(3,OCR0%10);
		Segment_DisplayDigit(2,(OCR0/10)%10);
		Segment_DisplayDigit(1,OCR0/100);
		a=(OCR0/100)+0x30;
 214:	4b 9d       	mul	r20, r11
 216:	41 2d       	mov	r20, r1
 218:	11 24       	eor	r1, r1
 21a:	42 95       	swap	r20
 21c:	4f 70       	andi	r20, 0x0F	; 15
 21e:	40 5d       	subi	r20, 0xD0	; 208
		b=((OCR0/10)%10)+0x30;
		c=(OCR0%10)+0x30;
		
		LCD_DispCharXY(2,2,a);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	30 d1       	rcall	.+608    	; 0x486 <LCD_DispCharXY>
		OCR0 = i;
		Segment_DisplayDigit(3,OCR0%10);
		Segment_DisplayDigit(2,(OCR0/10)%10);
		Segment_DisplayDigit(1,OCR0/100);
		a=(OCR0/100)+0x30;
		b=((OCR0/10)%10)+0x30;
 226:	ad 9c       	mul	r10, r13
 228:	81 2d       	mov	r24, r1
 22a:	11 24       	eor	r1, r1
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	86 95       	lsr	r24
 232:	8d 9d       	mul	r24, r13
 234:	91 2d       	mov	r25, r1
 236:	11 24       	eor	r1, r1
 238:	96 95       	lsr	r25
 23a:	96 95       	lsr	r25
 23c:	96 95       	lsr	r25
 23e:	99 0f       	add	r25, r25
 240:	29 2f       	mov	r18, r25
 242:	22 0f       	add	r18, r18
 244:	22 0f       	add	r18, r18
 246:	92 0f       	add	r25, r18
 248:	89 1b       	sub	r24, r25
 24a:	48 2f       	mov	r20, r24
 24c:	40 5d       	subi	r20, 0xD0	; 208
		c=(OCR0%10)+0x30;
		
		LCD_DispCharXY(2,2,a);
		LCD_DispCharXY(2,3,b);
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	19 d1       	rcall	.+562    	; 0x486 <LCD_DispCharXY>
		Segment_DisplayDigit(3,OCR0%10);
		Segment_DisplayDigit(2,(OCR0/10)%10);
		Segment_DisplayDigit(1,OCR0/100);
		a=(OCR0/100)+0x30;
		b=((OCR0/10)%10)+0x30;
		c=(OCR0%10)+0x30;
 254:	cd 9c       	mul	r12, r13
 256:	81 2d       	mov	r24, r1
 258:	11 24       	eor	r1, r1
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	86 95       	lsr	r24
 260:	88 0f       	add	r24, r24
 262:	98 2f       	mov	r25, r24
 264:	99 0f       	add	r25, r25
 266:	99 0f       	add	r25, r25
 268:	89 0f       	add	r24, r25
 26a:	4c 2d       	mov	r20, r12
 26c:	48 1b       	sub	r20, r24
 26e:	40 5d       	subi	r20, 0xD0	; 208
		
		LCD_DispCharXY(2,2,a);
		LCD_DispCharXY(2,3,b);
		LCD_DispCharXY(2,4,c);
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	08 d1       	rcall	.+528    	; 0x486 <LCD_DispCharXY>
 276:	8f e1       	ldi	r24, 0x1F	; 31
 278:	9e e4       	ldi	r25, 0x4E	; 78
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x11c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x122>
 280:	00 00       	nop
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
	
	while(1)
	{
		for(int i=0;i<256;i++){
 282:	21 96       	adiw	r28, 0x01	; 1
 284:	cf 3f       	cpi	r28, 0xFF	; 255
 286:	d1 05       	cpc	r29, r1
 288:	09 f0       	breq	.+2      	; 0x28c <main+0x12e>
 28a:	0c f4       	brge	.+2      	; 0x28e <main+0x130>
 28c:	93 cf       	rjmp	.-218    	; 0x1b4 <main+0x56>
 28e:	e8 01       	movw	r28, r16
		
		_delay_ms(10);
		}

		for(int i=256;i>0;i--){
			OCR0 = i;
 290:	c1 bf       	out	0x31, r28	; 49
			Segment_DisplayDigit(3,OCR0%10);
 292:	61 b7       	in	r22, 0x31	; 49
 294:	6d 9d       	mul	r22, r13
 296:	81 2d       	mov	r24, r1
 298:	11 24       	eor	r1, r1
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	86 95       	lsr	r24
 2a0:	88 0f       	add	r24, r24
 2a2:	98 2f       	mov	r25, r24
 2a4:	99 0f       	add	r25, r25
 2a6:	99 0f       	add	r25, r25
 2a8:	89 0f       	add	r24, r25
 2aa:	68 1b       	sub	r22, r24
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	1c df       	rcall	.-456    	; 0xe8 <Segment_DisplayDigit>
			Segment_DisplayDigit(2,(OCR0/10)%10);
 2b0:	61 b7       	in	r22, 0x31	; 49
 2b2:	6d 9d       	mul	r22, r13
 2b4:	61 2d       	mov	r22, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	66 95       	lsr	r22
 2ba:	66 95       	lsr	r22
 2bc:	66 95       	lsr	r22
 2be:	6d 9d       	mul	r22, r13
 2c0:	81 2d       	mov	r24, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	86 95       	lsr	r24
 2c6:	86 95       	lsr	r24
 2c8:	86 95       	lsr	r24
 2ca:	88 0f       	add	r24, r24
 2cc:	98 2f       	mov	r25, r24
 2ce:	99 0f       	add	r25, r25
 2d0:	99 0f       	add	r25, r25
 2d2:	89 0f       	add	r24, r25
 2d4:	68 1b       	sub	r22, r24
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	07 df       	rcall	.-498    	; 0xe8 <Segment_DisplayDigit>
			Segment_DisplayDigit(1,OCR0/100);
 2da:	61 b7       	in	r22, 0x31	; 49
 2dc:	6b 9d       	mul	r22, r11
 2de:	61 2d       	mov	r22, r1
 2e0:	11 24       	eor	r1, r1
 2e2:	62 95       	swap	r22
 2e4:	6f 70       	andi	r22, 0x0F	; 15
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	ff de       	rcall	.-514    	; 0xe8 <Segment_DisplayDigit>
			a=(OCR0/100)+0x30;
 2ea:	41 b7       	in	r20, 0x31	; 49
			b=((OCR0/10)%10)+0x30;
 2ec:	a1 b6       	in	r10, 0x31	; 49
			c=(OCR0%10)+0x30;
 2ee:	c1 b6       	in	r12, 0x31	; 49
		for(int i=256;i>0;i--){
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
 2f0:	4b 9d       	mul	r20, r11
 2f2:	41 2d       	mov	r20, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	42 95       	swap	r20
 2f8:	4f 70       	andi	r20, 0x0F	; 15
 2fa:	40 5d       	subi	r20, 0xD0	; 208
			b=((OCR0/10)%10)+0x30;
			c=(OCR0%10)+0x30;
				LCD_DispCharXY(2,2,a);
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	c2 d0       	rcall	.+388    	; 0x486 <LCD_DispCharXY>
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
			b=((OCR0/10)%10)+0x30;
 302:	ad 9c       	mul	r10, r13
 304:	41 2d       	mov	r20, r1
 306:	11 24       	eor	r1, r1
 308:	46 95       	lsr	r20
 30a:	46 95       	lsr	r20
 30c:	46 95       	lsr	r20
 30e:	4d 9d       	mul	r20, r13
 310:	81 2d       	mov	r24, r1
 312:	11 24       	eor	r1, r1
 314:	86 95       	lsr	r24
 316:	86 95       	lsr	r24
 318:	86 95       	lsr	r24
 31a:	88 0f       	add	r24, r24
 31c:	98 2f       	mov	r25, r24
 31e:	99 0f       	add	r25, r25
 320:	99 0f       	add	r25, r25
 322:	89 0f       	add	r24, r25
 324:	48 1b       	sub	r20, r24
 326:	40 5d       	subi	r20, 0xD0	; 208
			c=(OCR0%10)+0x30;
				LCD_DispCharXY(2,2,a);
				LCD_DispCharXY(2,3,b);
 328:	63 e0       	ldi	r22, 0x03	; 3
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	ac d0       	rcall	.+344    	; 0x486 <LCD_DispCharXY>
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
			b=((OCR0/10)%10)+0x30;
			c=(OCR0%10)+0x30;
 32e:	cd 9c       	mul	r12, r13
 330:	81 2d       	mov	r24, r1
 332:	11 24       	eor	r1, r1
 334:	86 95       	lsr	r24
 336:	86 95       	lsr	r24
 338:	86 95       	lsr	r24
 33a:	88 0f       	add	r24, r24
 33c:	98 2f       	mov	r25, r24
 33e:	99 0f       	add	r25, r25
 340:	99 0f       	add	r25, r25
 342:	89 0f       	add	r24, r25
 344:	4c 2d       	mov	r20, r12
 346:	48 1b       	sub	r20, r24
 348:	40 5d       	subi	r20, 0xD0	; 208
				LCD_DispCharXY(2,2,a);
				LCD_DispCharXY(2,3,b);
				LCD_DispCharXY(2,4,c);
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	9b d0       	rcall	.+310    	; 0x486 <LCD_DispCharXY>
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	9e e4       	ldi	r25, 0x4E	; 78
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x1f6>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x1fc>
 35a:	00 00       	nop
 35c:	21 97       	sbiw	r28, 0x01	; 1
		LCD_DispCharXY(2,4,c);
		
		_delay_ms(10);
		}

		for(int i=256;i>0;i--){
 35e:	09 f0       	breq	.+2      	; 0x362 <main+0x204>
 360:	97 cf       	rjmp	.-210    	; 0x290 <main+0x132>
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
	
	while(1)
	{
		for(int i=0;i<256;i++){
 362:	e7 01       	movw	r28, r14
 364:	8f cf       	rjmp	.-226    	; 0x284 <main+0x126>

00000366 <LCD_DispChar>:
	    _delay_us(40);
}

void LCD_ClearAll(void)
{
	LCD_SendCmd(0x01);
 366:	c5 9a       	sbi	0x18, 5	; 24
 368:	c6 98       	cbi	0x18, 6	; 24
 36a:	88 23       	and	r24, r24
 36c:	14 f4       	brge	.+4      	; 0x372 <LCD_DispChar+0xc>
 36e:	af 9a       	sbi	0x15, 7	; 21
 370:	01 c0       	rjmp	.+2      	; 0x374 <LCD_DispChar+0xe>
 372:	af 98       	cbi	0x15, 7	; 21
 374:	86 ff       	sbrs	r24, 6
 376:	02 c0       	rjmp	.+4      	; 0x37c <LCD_DispChar+0x16>
 378:	ae 9a       	sbi	0x15, 6	; 21
 37a:	01 c0       	rjmp	.+2      	; 0x37e <LCD_DispChar+0x18>
 37c:	ae 98       	cbi	0x15, 6	; 21
 37e:	85 ff       	sbrs	r24, 5
 380:	02 c0       	rjmp	.+4      	; 0x386 <LCD_DispChar+0x20>
 382:	ad 9a       	sbi	0x15, 5	; 21
 384:	01 c0       	rjmp	.+2      	; 0x388 <LCD_DispChar+0x22>
 386:	ad 98       	cbi	0x15, 5	; 21
 388:	84 ff       	sbrs	r24, 4
 38a:	02 c0       	rjmp	.+4      	; 0x390 <LCD_DispChar+0x2a>
 38c:	ac 9a       	sbi	0x15, 4	; 21
 38e:	01 c0       	rjmp	.+2      	; 0x392 <LCD_DispChar+0x2c>
 390:	ac 98       	cbi	0x15, 4	; 21
 392:	c7 9a       	sbi	0x18, 7	; 24
 394:	c7 98       	cbi	0x18, 7	; 24
 396:	83 ff       	sbrs	r24, 3
 398:	02 c0       	rjmp	.+4      	; 0x39e <LCD_DispChar+0x38>
 39a:	af 9a       	sbi	0x15, 7	; 21
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <LCD_DispChar+0x3a>
 39e:	af 98       	cbi	0x15, 7	; 21
 3a0:	82 ff       	sbrs	r24, 2
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <LCD_DispChar+0x42>
 3a4:	ae 9a       	sbi	0x15, 6	; 21
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <LCD_DispChar+0x44>
 3a8:	ae 98       	cbi	0x15, 6	; 21
 3aa:	81 ff       	sbrs	r24, 1
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <LCD_DispChar+0x4c>
 3ae:	ad 9a       	sbi	0x15, 5	; 21
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <LCD_DispChar+0x4e>
 3b2:	ad 98       	cbi	0x15, 5	; 21
 3b4:	80 ff       	sbrs	r24, 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <LCD_DispChar+0x56>
 3b8:	ac 9a       	sbi	0x15, 4	; 21
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <LCD_DispChar+0x58>
 3bc:	ac 98       	cbi	0x15, 4	; 21
 3be:	c7 9a       	sbi	0x18, 7	; 24
 3c0:	c7 98       	cbi	0x18, 7	; 24
 3c2:	8a e6       	ldi	r24, 0x6A	; 106
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_DispChar+0x5e>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_DispChar+0x64>
 3ca:	08 95       	ret

000003cc <LCD_SendCmd>:
 3cc:	c5 98       	cbi	0x18, 5	; 24
 3ce:	c6 98       	cbi	0x18, 6	; 24
 3d0:	88 23       	and	r24, r24
 3d2:	14 f4       	brge	.+4      	; 0x3d8 <LCD_SendCmd+0xc>
 3d4:	af 9a       	sbi	0x15, 7	; 21
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <LCD_SendCmd+0xe>
 3d8:	af 98       	cbi	0x15, 7	; 21
 3da:	86 ff       	sbrs	r24, 6
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <LCD_SendCmd+0x16>
 3de:	ae 9a       	sbi	0x15, 6	; 21
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <LCD_SendCmd+0x18>
 3e2:	ae 98       	cbi	0x15, 6	; 21
 3e4:	85 ff       	sbrs	r24, 5
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <LCD_SendCmd+0x20>
 3e8:	ad 9a       	sbi	0x15, 5	; 21
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <LCD_SendCmd+0x22>
 3ec:	ad 98       	cbi	0x15, 5	; 21
 3ee:	84 ff       	sbrs	r24, 4
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <LCD_SendCmd+0x2a>
 3f2:	ac 9a       	sbi	0x15, 4	; 21
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <LCD_SendCmd+0x2c>
 3f6:	ac 98       	cbi	0x15, 4	; 21
 3f8:	c7 9a       	sbi	0x18, 7	; 24
 3fa:	c7 98       	cbi	0x18, 7	; 24
 3fc:	83 ff       	sbrs	r24, 3
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <LCD_SendCmd+0x38>
 400:	af 9a       	sbi	0x15, 7	; 21
 402:	01 c0       	rjmp	.+2      	; 0x406 <LCD_SendCmd+0x3a>
 404:	af 98       	cbi	0x15, 7	; 21
 406:	82 ff       	sbrs	r24, 2
 408:	02 c0       	rjmp	.+4      	; 0x40e <LCD_SendCmd+0x42>
 40a:	ae 9a       	sbi	0x15, 6	; 21
 40c:	01 c0       	rjmp	.+2      	; 0x410 <LCD_SendCmd+0x44>
 40e:	ae 98       	cbi	0x15, 6	; 21
 410:	81 ff       	sbrs	r24, 1
 412:	02 c0       	rjmp	.+4      	; 0x418 <LCD_SendCmd+0x4c>
 414:	ad 9a       	sbi	0x15, 5	; 21
 416:	01 c0       	rjmp	.+2      	; 0x41a <LCD_SendCmd+0x4e>
 418:	ad 98       	cbi	0x15, 5	; 21
 41a:	80 ff       	sbrs	r24, 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <LCD_SendCmd+0x56>
 41e:	ac 9a       	sbi	0x15, 4	; 21
 420:	01 c0       	rjmp	.+2      	; 0x424 <LCD_SendCmd+0x58>
 422:	ac 98       	cbi	0x15, 4	; 21
 424:	c7 9a       	sbi	0x18, 7	; 24
 426:	c7 98       	cbi	0x18, 7	; 24
 428:	8a e6       	ldi	r24, 0x6A	; 106
 42a:	8a 95       	dec	r24
 42c:	f1 f7       	brne	.-4      	; 0x42a <LCD_SendCmd+0x5e>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_SendCmd+0x64>
 430:	08 95       	ret

00000432 <LCD_Init>:
 432:	84 b3       	in	r24, 0x14	; 20
 434:	80 6f       	ori	r24, 0xF0	; 240
 436:	84 bb       	out	0x14, r24	; 20
 438:	85 b3       	in	r24, 0x15	; 21
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	85 bb       	out	0x15, r24	; 21
 43e:	87 b3       	in	r24, 0x17	; 23
 440:	80 6e       	ori	r24, 0xE0	; 224
 442:	87 bb       	out	0x17, r24	; 23
 444:	88 b3       	in	r24, 0x18	; 24
 446:	8f 71       	andi	r24, 0x1F	; 31
 448:	88 bb       	out	0x18, r24	; 24
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	9c e9       	ldi	r25, 0x9C	; 156
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_Init+0x1c>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_Init+0x22>
 454:	00 00       	nop
 456:	88 e2       	ldi	r24, 0x28	; 40
 458:	b9 df       	rcall	.-142    	; 0x3cc <LCD_SendCmd>
 45a:	8c e0       	ldi	r24, 0x0C	; 12
 45c:	b7 df       	rcall	.-146    	; 0x3cc <LCD_SendCmd>
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	b5 df       	rcall	.-150    	; 0x3cc <LCD_SendCmd>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	b3 df       	rcall	.-154    	; 0x3cc <LCD_SendCmd>
 466:	8f e0       	ldi	r24, 0x0F	; 15
 468:	97 e2       	ldi	r25, 0x27	; 39
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_Init+0x38>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_Init+0x3e>
 470:	00 00       	nop
 472:	08 95       	ret

00000474 <LCD_GotoXY>:
/* Pos, Line */
/* Line: 1/2 */
/* Pos: 0/15 */
void LCD_GotoXY(unsigned char x, unsigned char y)
{
	if(y == 1)
 474:	61 30       	cpi	r22, 0x01	; 1
 476:	11 f4       	brne	.+4      	; 0x47c <LCD_GotoXY+0x8>
	{
		//LCD RAM address for the 1st line: 0x80
		LCD_SendCmd(0x80 + x);
 478:	80 58       	subi	r24, 0x80	; 128
 47a:	a8 cf       	rjmp	.-176    	; 0x3cc <LCD_SendCmd>
	}
	else if( y == 2)
 47c:	62 30       	cpi	r22, 0x02	; 2
 47e:	11 f4       	brne	.+4      	; 0x484 <LCD_GotoXY+0x10>
	{
		//LCD RAM address for the 2nd line: 0xC0
		LCD_SendCmd(0xC0 + x);
 480:	80 54       	subi	r24, 0x40	; 64
 482:	a4 cf       	rjmp	.-184    	; 0x3cc <LCD_SendCmd>
 484:	08 95       	ret

00000486 <LCD_DispCharXY>:
	setEN();
	clearEN();
	_delay_us(40);
}
void LCD_DispCharXY(unsigned char x, unsigned char y,unsigned char data)
{
 486:	cf 93       	push	r28
 488:	c4 2f       	mov	r28, r20
	LCD_GotoXY(x,y);
 48a:	f4 df       	rcall	.-24     	; 0x474 <LCD_GotoXY>
	LCD_DispChar(data);
 48c:	8c 2f       	mov	r24, r28
 48e:	6b df       	rcall	.-298    	; 0x366 <LCD_DispChar>
}
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <LCD_DispString>:
{
	LCD_GotoXY(x,y);
	LCD_DispString(str);
}
void LCD_DispString(unsigned char *str)
{
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	ec 01       	movw	r28, r24
	unsigned char count = 0;
	while(str[count] != '\0')
 49c:	88 81       	ld	r24, Y
 49e:	88 23       	and	r24, r24
 4a0:	49 f0       	breq	.+18     	; 0x4b4 <LCD_DispString+0x20>
	LCD_GotoXY(x,y);
	LCD_DispString(str);
}
void LCD_DispString(unsigned char *str)
{
	unsigned char count = 0;
 4a2:	10 e0       	ldi	r17, 0x00	; 0
	while(str[count] != '\0')
		LCD_DispChar(str[count++]);
 4a4:	1f 5f       	subi	r17, 0xFF	; 255
 4a6:	5f df       	rcall	.-322    	; 0x366 <LCD_DispChar>
	LCD_DispString(str);
}
void LCD_DispString(unsigned char *str)
{
	unsigned char count = 0;
	while(str[count] != '\0')
 4a8:	fe 01       	movw	r30, r28
 4aa:	e1 0f       	add	r30, r17
 4ac:	f1 1d       	adc	r31, r1
 4ae:	80 81       	ld	r24, Z
 4b0:	81 11       	cpse	r24, r1
 4b2:	f8 cf       	rjmp	.-16     	; 0x4a4 <LCD_DispString+0x10>
		LCD_DispChar(str[count++]);
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	08 95       	ret

000004bc <LCD_DispStringXY>:
		//LCD RAM address for the 2nd line: 0xC0
		LCD_SendCmd(0xC0 + x);
	}
}
void LCD_DispStringXY(unsigned char x, unsigned char y,unsigned char *str)
{
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ea 01       	movw	r28, r20
	LCD_GotoXY(x,y);
 4c2:	d8 df       	rcall	.-80     	; 0x474 <LCD_GotoXY>
	LCD_DispString(str);
 4c4:	ce 01       	movw	r24, r28
 4c6:	e6 df       	rcall	.-52     	; 0x494 <LCD_DispString>
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
