
Timer_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000156  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000015a  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f9  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000205  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000050  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000e2  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000009e  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	53 c0       	rjmp	.+166    	; 0x152 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

volatile int count=0; //volatile because this variable is transfered between multiple functions.

int main(void)
{
	sei();	//SREG |= (1<<8);
  ae:	78 94       	sei
			//enable the global interrupt.
			
	DDRF |= (1<<PF1); // make PF1 as an output.
  b0:	e1 e6       	ldi	r30, 0x61	; 97
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	PORTF |= (1<<PF1); //Enable the LEDs by make PF1 high.
  ba:	e2 e6       	ldi	r30, 0x62	; 98
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
		
	DDRA |= 0xFF; //make all LEDs as an output.
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0x00; // close all LEDs.
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8b bb       	out	0x1b, r24	; 27
		
	DDRB |= (1<<PB4); //make LED D10 as an output.
  ce:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1<<PB4); //make LED D10 on.
  d0:	c4 9a       	sbi	0x18, 4	; 24
	
	TCCR0 |= (1<<CS01);//|(1<<CS00)|(1<<CS02);  //Timer/Counter Control Register first 3 bits are re-scaler 111 -> /1024
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01); //Convert Timer to be in CTC mode
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM00); //Toggle on compare match State.
  de:	83 b7       	in	r24, 0x33	; 51
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	83 bf       	out	0x33, r24	; 51
	OCR0 = 99;			 //Output Compare Match.
  e4:	83 e6       	ldi	r24, 0x63	; 99
  e6:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0); //Timer/Counter Interrupt Mask Register Compare Match interrupt is enabled.
  e8:	87 b7       	in	r24, 0x37	; 55
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	87 bf       	out	0x37, r24	; 55
		
    while(1)
    {
		PORTA = 0xff;    //no | needed because that is overwrite.
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8b bb       	out	0x1b, r24	; 27
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <main+0x42>

000000f4 <__vector_15>:
						//Open all LEDs.
	}
}
ISR(TIMER0_COMP_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	count++;
 104:	80 91 00 01 	lds	r24, 0x0100
 108:	90 91 01 01 	lds	r25, 0x0101
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25
 112:	80 93 00 01 	sts	0x0100, r24
	if(count==5000){
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	90 91 01 01 	lds	r25, 0x0101
 11e:	88 38       	cpi	r24, 0x88	; 136
 120:	93 41       	sbci	r25, 0x13	; 19
 122:	79 f4       	brne	.+30     	; 0x142 <__vector_15+0x4e>
		PORTA =0xAA;//no | needed because that is overwrite//10101010
 124:	8a ea       	ldi	r24, 0xAA	; 170
 126:	8b bb       	out	0x1b, r24	; 27
		count=0;
 128:	10 92 01 01 	sts	0x0101, r1
 12c:	10 92 00 01 	sts	0x0100, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	91 ee       	ldi	r25, 0xE1	; 225
 134:	24 e0       	ldi	r18, 0x04	; 4
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <__vector_15+0x42>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__vector_15+0x4c>
 140:	00 00       	nop
		_delay_ms(200);
		
	}
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
